
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  wonders      Wonder[] @relation("author")
  audit        AuditLog[] @relation("user_audit")
}

enum Role {
  VISITOR
  RESEARCHER
  EDITOR
  ARCHIVIST
  ADMIN
}

model Wonder {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  summary      String   @db.Text
  description  String?  @db.Text
  myth         String?  @db.Text
  category     Category
  continent    Continent
  yearBuilt    Int?
  existsNow    Boolean  @default(true)
  status       Status   @default(DRAFT)
  location     Json?
  createdById  String
  createdBy    User     @relation("author", fields: [createdById], references: [id])
  media        Media[]
  tags         TagOnWonder[]
  views        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  audit        AuditLog[]
}

enum Category  { CLASSIC MODERN NATURAL }
enum Continent { AFRICA ASIA EUROPE NORTH_AMERICA SOUTH_AMERICA OCEANIA ANTARCTICA }
enum Status    { DRAFT PENDING APPROVED }

model Media {
  id          String   @id @default(cuid())
  wonderId    String
  wonder      Wonder   @relation(fields: [wonderId], references: [id])
  type        MediaType
  url         String
  mime        String
  size        Int
  status      Status     @default(PENDING)
  createdAt   DateTime   @default(now())
  createdById String
}

enum MediaType { IMAGE DOCUMENT }

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  wonders TagOnWonder[]
}

model TagOnWonder {
  wonderId String
  tagId    String
  addedById String
  wonder   Wonder @relation(fields: [wonderId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
  @@id([wonderId, tagId])
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  actor      User?    @relation("user_audit", fields: [actorId], references: [id])
  entity     String
  entityId   String
  action     String
  changes    Json?
  createdAt  DateTime @default(now())
}

